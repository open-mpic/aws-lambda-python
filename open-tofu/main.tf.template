# Init a default aws provider for the api deployment.
provider "aws" {
  region                  = "{{api-region}}"
  profile                 = "default"
}

locals {
  deployment_id = {{deployment-id}}
  perspectives = {{perspectives}}
}

# Python open-mpic layer (contains third party libraries)
resource "aws_lambda_layer_version" "python3_open_mpic_layer" {
    filename            = "../layer/python3_layer_content.zip"
    layer_name          = "python3_open_mpic_layer_${local.deployment_id}"
    source_code_hash    = "${filebase64sha256("../layer/python3_layer_content.zip")}"
    compatible_runtimes = ["python3.11"]
}

# Mpic Coordinator layer for the mpic coordinator lambda (contains supporting first-party source code)
resource "aws_lambda_layer_version" "mpic_coordinator_layer" {
    filename            = "../layer/mpic_coordinator_layer_content.zip"
    layer_name          = "mpic_coordinator_layer_${local.deployment_id}"
    source_code_hash    = "${filebase64sha256("../layer/mpic_coordinator_layer_content.zip")}"
    compatible_runtimes = ["python3.11"]
}

# Provide an IAM role for the functions to run under.
resource "aws_iam_role" "open_mpic_lambda_role" {
  name = "open-mpic-lambda-role-${local.deployment_id}"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

# Assign the default basic lambda execution policy to a var.
data "aws_iam_policy" "AWSLambdaBasicExecutionRole" {
  arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Provide the IAM role for the lambda functions with the basic lambda execution policy so that they get these privileges when executing.
resource "aws_iam_role_policy_attachment" "basic-execution-policy-attach" {
  role       = "${aws_iam_role.open_mpic_lambda_role.name}"
  policy_arn = "${data.aws_iam_policy.AWSLambdaBasicExecutionRole.arn}"
}

resource "aws_iam_role_policy_attachment" "vpc-policy-attach" {
  count = var.dnssec_enabled ? 1 : 0
  role       = "${aws_iam_role.open_mpic_lambda_role.name}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
}

# Allow the lambda functions to also call other lambda functions.
resource "aws_iam_role_policy_attachment" "invoke-lambda-policy-attach" {
  role       = "${aws_iam_role.open_mpic_lambda_role.name}"
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
}

# Init the mpic coordinator lambda.
resource "aws_lambda_function" "mpic_coordinator_lambda" {
    filename      = "../{{source-path}}/mpic_coordinator_lambda/mpic_coordinator_lambda.zip"
    function_name = "open_mpic_lambda_coordinator_${local.deployment_id}"
    role          = aws_iam_role.open_mpic_lambda_role.arn
    handler       = "mpic_coordinator_lambda_function.lambda_handler"
    source_code_hash = filebase64sha256("../{{source-path}}/mpic_coordinator_lambda/mpic_coordinator_lambda.zip")
    runtime = "python3.11"
    architectures = ["arm64"]
    memory_size = var.coordinator_memory_size
    timeout = 60
    layers = [
        aws_lambda_layer_version.python3_open_mpic_layer.arn,
        aws_lambda_layer_version.mpic_coordinator_layer.arn,
    ]
    environment {
      variables = {
        perspectives = jsonencode(local.perspectives)
        default_perspective_count = {{default-perspective-count}}
        hash_secret = {{hash-secret}}
        {{absolute-max-attempts-with-key}}
        {{log-level-with-key}}
      }
    }
}

resource "aws_api_gateway_rest_api" "open_mpic_api" {
  name = "open-mpic-api-${local.deployment_id}"
  description = "Open MPIC API Gateway"
  endpoint_configuration {
    types = ["EDGE"]
  }
}

resource "aws_api_gateway_deployment" "deployment" {
  depends_on = [
    aws_api_gateway_integration.mpic_integration
  ]

  rest_api_id = aws_api_gateway_rest_api.open_mpic_api.id

  stage_name = "v1"
}

resource "aws_lambda_permission" "lambda_permission_api" {
  statement_id  = "AllowOpenMPICAPIInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.mpic_coordinator_lambda.function_name
  principal     = "apigateway.amazonaws.com"

  # The /* part allows invocation from any stage, method and resource path
  # within API Gateway.
  source_arn = "${aws_api_gateway_rest_api.open_mpic_api.execution_arn}/*"
}

# Set up the API key for the API.
resource "aws_api_gateway_api_key" "open_mpic" {
  name = "open_mpic-${local.deployment_id}"
}

resource "aws_api_gateway_usage_plan_key" "prod_usage_key" {
  key_id        = aws_api_gateway_api_key.open_mpic.id
  key_type      = "API_KEY"
  usage_plan_id = aws_api_gateway_usage_plan.prod_usage_plan.id
}

resource "aws_api_gateway_usage_plan" "prod_usage_plan" {
  name         = "prod-usage-plan"
  description  = "Production usage plan for Open MPIC"
  product_code = "prod-open-mpic"

  api_stages {
    api_id = aws_api_gateway_rest_api.open_mpic_api.id
    stage  = aws_api_gateway_deployment.deployment.stage_name
  }
}


